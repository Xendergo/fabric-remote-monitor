import { strats } from "./defaultStrategies"
import type { Registry } from "./registry"
import { MakeSendable, Sendable } from "./sendableTypesHelpers"

/**
 * The names of the types allowed to be sent via an {@link InputFields} instance
 */
type AllowedInputFieldTypesNames = "string" | "bool" | "number"

/**
 * A generic representation of {@link InputFieldOptions}, used in the definition of {@link InputFieldsTypes}
 */
type InputFieldOptionsGeneric<T extends AllowedInputFieldTypesNames> = {
    type: T
}

/**
 * Options for how an input field looks and works
 */
export type InputFieldOptions =
    InputFieldOptionsGeneric<AllowedInputFieldTypesNames>

/**
 * The types allowed to be sent via an {@link InputFields} instance
 */
export type AllowedInputFieldTypes = string | boolean | number | null

/**
 * the different classes representing the different types allowed to be sent via an {@link InputFields} instance
 */
export type AllowedInputFieldClasses =
    | InputFieldClass<string | null>
    | InputFieldClass<boolean>
    | InputFieldClass<number | null>

/**
 * A [mapped type](www.typescriptlang.org/docs/handbook/2/mapped-types.html) used as a generic type constraint to improve type safety
 * Used to ensure that the interface inputted to {@link InputFields} doesn't use any types that can't be sent via an {@link InputFields} instance
 */
export type InputFieldsClassesConstraint<T> = {
    +readonly [Property in keyof T]: AllowedInputFieldTypes
}

/**
 * A [mapped type](www.typescriptlang.org/docs/handbook/2/mapped-types.html) that converts the interface inputted to {@link InputFields} to the fields argument of the {@link InputFields} constructor
 *
 * For example:
 * ```ts
 * interface example {
 *   str: string | null
 *   bool: boolean
 *   num: number | null
 * }
 *
 * type transformed = InputFieldsTypes<example>
 *
 * // converts to:
 * type transformed = {
 *   readonly str: InputFieldOptionsGeneric<"string">
 *   readonly bool: InputFieldOptionsGeneric<"bool">
 *   readonly num: InputFieldOptionsGeneric<"number">
 * }
 * ```
 */
type InputFieldsTypes<T extends InputFieldsClassesConstraint<T>> = {
    +readonly [Property in keyof T]: InputFieldOptionsGeneric<
        T[Property] extends string | null
            ? "string"
            : T[Property] extends boolean
            ? "bool"
            : T[Property] extends number | null
            ? "number"
            : never
    >
}

/**
 * A [mapped type](www.typescriptlang.org/docs/handbook/2/mapped-types.html) that converts an instance of {@link AllowedInputFieldTypes} to an instance of {@link AllowedInputFieldClasses} while still allowing type inference
 *
 * For example:
 * ```ts
 * interface example {
 *   str: string | null
 *   bool: boolean
 *   num: number | null
 * }
 *
 * type transformed = InputFieldsClasses<example>
 *
 * //converts to:
 * type transformed = {
 *   readonly str: InputFieldClass<string | null>
 *   readonly bool: InputFieldClass<boolean>
 *   readonly num: InputFieldClass<number | null>
 * }
 * ```
 */
export type InputFieldsClasses<T extends InputFieldsClassesConstraint<T>> = {
    +readonly [Property in keyof T]: Extract<
        InputFieldClass<T[Property]>,
        AllowedInputFieldClasses
    >
}

/**
 * A class generated by {@link generateClass} for {@link InputFields}, designed to be sent via regular `send` implementations
 */
export type InputFieldClass<T> = {
    channel(): string
    type(): AllowedInputFieldTypesNames
    new (value: T): { value: T; channel: string | undefined }
}

/**
 * Generates a class meant to be passed into a `send` function that represents a field in a {@link InputFields} instance
 * @param registry The registry to register the class in
 * @param channel The channel the {@link InputFields} instance calling this is to be send through, combined with `key` to form a unique channel for this particular class
 * @param key The name of the field the class will be generated for
 * @param type The name of the type the class will be generated to send
 * @returns A class meant to be sent via regular `send` implementations to send a field in a {@link InputFields} instance
 */
function generateClass(
    registry: Registry<Sendable, [(data: any) => boolean]>,
    channel: string,
    key: string,
    type: AllowedInputFieldTypesNames
) {
    let ret: InputFieldClass<any>
    if (type == "string") {
        @MakeSendable(registry, `${channel}.${key}`, [
            strats.each({
                value: strats.any<string | null>(strats.string, strats.null),
            }),
        ])
        class NewClass extends Sendable {
            constructor(value: string | null) {
                super()
                this.value = value
            }

            static type() {
                return type
            }

            value: string | null
        }

        ret = NewClass
    } else if (type == "bool") {
        @MakeSendable(registry, `${channel}.${key}`, [
            strats.each({
                value: strats.boolean,
            }),
        ])
        class NewClass extends Sendable {
            constructor(value: boolean) {
                super()
                this.value = value
            }

            static type() {
                return type
            }

            value: boolean
        }

        ret = NewClass
    } /*if (type == "number")*/ else {
        @MakeSendable(registry, `${channel}.${key}`, [
            strats.each({
                value: strats.any<number | null>(strats.number, strats.null),
            }),
        ])
        class NewClass extends Sendable {
            constructor(value: number | null) {
                super()
                this.value = value
            }

            static type() {
                return type
            }

            value: number | null
        }

        ret = NewClass
    }

    return ret
}

function everythingGenerator<T extends InputFieldsClassesConstraint<T>>(
    registry: Registry<Sendable, [(data: any) => boolean]>,
    channel: string
) {
    @MakeSendable(registry, channel, [strats.trust()])
    class NewClass extends Sendable {
        [key: string]: AllowedInputFieldTypes | undefined

        constructor(values: T) {
            super()

            for (const key in values) {
                this[key as string] = values[key] as AllowedInputFieldTypes
            }
        }
    }

    return NewClass as unknown as {
        new (values: T): Sendable & T
        channel(): string
    }
}

function requestDefaultGenerator(
    registry: Registry<Sendable, [(data: any) => boolean]>,
    channel: string
) {
    @MakeSendable(registry, `${channel}:default`, [strats.trust()])
    class NewClass extends Sendable {}

    return NewClass
}

function statusGenerator(
    registry: Registry<Sendable, [(data: any) => boolean]>,
    channel: string
) {
    @MakeSendable(registry, `${channel}:Status`, [
        strats.each({
            status: strats.any(strats.value("Error"), strats.value("Success")),
            text: strats.string,
        }),
    ])
    class NewClass extends Sendable implements ResponseInterface {
        constructor(status: "Error" | "Success", text: string) {
            super()
            this.status = status
            this.text = text
        }

        status: "Error" | "Success"
        text: string
    }

    return NewClass
}

export interface ResponseInterface {
    status: "Error" | "Success"
    text: string
}

/**
 * A class representing a list of values, meant to make sending lots of unique values, like menus on the client side, more convienient.
 *
 * It does this by taking an interface, and converting the interface's keys to a series of classes meant to be instantiated & sent via regular {@link ListenerManager} implementations in a convenient & type safe way
 *
 * Meant to be instantiated in the global scope and reused, doing otherwise would cause a memory leak
 *
 * @typeParam `T` The interface of values that can be sent via the InputFields instance
 */
export class InputFields<T extends InputFieldsClassesConstraint<T>> {
    /**
     * @param channel The channel this InputField transfers data on
     * @param fields The data types of the values in type parameter `T`
     * @param submitAsEverything If this is set, send the entire input field through the Everything channel & use the text for the submit button
     */
    constructor(
        registry: Registry<Sendable, [(data: any) => boolean]>,
        channel: string,
        fields: InputFieldsTypes<T>,
        submitAsEverything: string | null = null
    ) {
        this.fields = Object.entries(fields)
            .map(v => {
                const [key, value] = v as [string, InputFieldOptions]

                return [
                    key,
                    generateClass(registry, channel, key, value.type),
                ] as [string, InputFieldClass<AllowedInputFieldTypes>]
            })
            .reduce<{ [key: string]: InputFieldClass<AllowedInputFieldTypes> }>(
                (a, v) => {
                    a[v[0]] = v[1]
                    return a
                },
                {}
            ) as InputFieldsClasses<T>

        this.fieldOptions = fields

        this.sendAsEverything = submitAsEverything

        this.Everything = everythingGenerator<T>(registry, channel)
        this.RequestDefault = requestDefaultGenerator(registry, channel)
        this.Status = statusGenerator(registry, channel)
    }

    /**
     * A record of classes that can be passed into `send` implementations
     */
    fields: InputFieldsClasses<T>

    /**
     * If this is not null, then submit the data through Everything & use the text as the text for the submit button
     */
    sendAsEverything: string | null

    /**
     * A record of options for how the data should be presented & submitted
     */
    fieldOptions: InputFieldsTypes<T>

    /**
     * A class that can be passed into `send` implementations that allows for transferring all data in the InputFields instance
     */
    Everything: {
        new (values: T): Sendable & T
        channel(): string
    }

    /**
     * A class that can be passed into `send` implementations that should be sent when requesting default values, and the response should be sent on the `Everything` channel
     */
    RequestDefault: {
        new (): Sendable
        channel(): string
    }

    /**
     * A class that can be passed into `send` implementations that represent either an error or success message
     */
    Status: {
        new (status: "Error" | "Success", text: string): Sendable &
            ResponseInterface
        channel(): string
    }
}
